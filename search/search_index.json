{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introducci\u00f3n","text":""},{"location":"#computadoras-y-programas","title":"Computadoras y programas","text":""},{"location":"#escribiendo-programas-simples","title":"Escribiendo programas simples","text":""},{"location":"#computo-con-numeros","title":"Computo con n\u00fameros","text":""},{"location":"#objetos-y-graficos","title":"Objetos y gr\u00e1ficos","text":""},{"location":"#secuencias-cadenas-listas-y-archivos","title":"Secuencias: Cadenas, listas y archivos","text":""},{"location":"#definicion-de-funciones","title":"Definici\u00f3n de funciones","text":""},{"location":"#estructuras-de-decision","title":"Estructuras de decisi\u00f3n","text":""},{"location":"#estructuras-de-bucle-y-booleanos","title":"Estructuras de bucle y booleanos","text":""},{"location":"#simulacion-y-diseno","title":"Simulaci\u00f3n y dise\u00f1o","text":""},{"location":"#definicion-de-clases","title":"Definici\u00f3n de clases","text":""},{"location":"#colecciones-de-datos","title":"Colecciones de datos","text":""},{"location":"#diseno-orientado-a-objetos","title":"Dise\u00f1o orientado a objetos","text":""},{"location":"#diseno-de-algoritmos-y-recursion","title":"Dise\u00f1o de algoritmos y recursi\u00f3n","text":""},{"location":"Capitulos/01_Computadoras_y_programas/","title":"Computadoras y programas","text":""},{"location":"Capitulos/01_Computadoras_y_programas/#objetivos","title":"Objetivos","text":"<ul> <li> <p>Comprender los respectivos roles del hardware y el software en los sistemas inform\u00e1ticos.</p> </li> <li> <p>Aprender qu\u00e9 estudian los inform\u00e1ticos y las t\u00e9cnicas que utilizan. </p> </li> <li> <p>Comprender el dise\u00f1o b\u00e1sico de una computadora moderna.</p> </li> <li> <p>Comprender la forma y funci\u00f3n de los lenguajes de programaci\u00f3n inform\u00e1tica.</p> </li> <li> <p>Comenzar a utilizar el lenguaje de programaci\u00f3n Python.</p> </li> <li> <p>Aprender sobre modelos ca\u00f3ticos y sus implicaciones para la inform\u00e1tica.</p> </li> </ul>"},{"location":"Capitulos/01_Computadoras_y_programas/#11-la-maquina-universal","title":"1.1. La m\u00e1quina universal","text":"<p>Casi todo el mundo ha utilizado una computadora en alg\u00fan momento. Quiz\u00e1s hayas jugado juegos en ella o la hayas usado para escribir un art\u00edculo, comprar en l\u00ednea, escuchar m\u00fasica o conectarte con tus amigos a trav\u00e9s de redes sociales. </p> <p>Las computadoras se utilizan para predecir el clima, dise\u00f1ar aviones, hacer pel\u00edculas, administrar negocios, realizar transacciones financieras y controlar f\u00e1bricas. \u00bfAlguna vez te has parado a preguntarte qu\u00e9 es exactamente una computadora? \u00bfC\u00f3mo puede un dispositivo realizar tantas tareas diferentes? Estas preguntas b\u00e1sicas son el punto de partida para aprender sobre computadoras y programaci\u00f3n de computadoras.</p> <p>Una computadora moderna puede definirse como: \"una m\u00e1quina que almacena y manipula informaci\u00f3n bajo el control de un programa modificable\". </p> <p>Hay dos elementos clave en esta definici\u00f3n: </p> <ul> <li> <p>La primera es que las computadoras son dispositivos para manipular informaci\u00f3n. </p> </li> <li> <p>La segunda es que las computadoras funcionan bajo el control de un programa modificable.</p> </li> </ul> <p>Comencemos analizando que quiere decir que las computadoras son dispositivos para manipular informaci\u00f3n.</p> <p>Esto significa que podemos poner informaci\u00f3n en una computadora, y \u00e9sta puede transformarla en formas nuevas y \u00fatiles, y luego generar o mostrar la informaci\u00f3n para nuestra interpretaci\u00f3n.</p> <p>Las computadoras no son las \u00fanicas m\u00e1quinas que manipulan informaci\u00f3n. Cuando usa una calculadora simple para sumar una columna de n\u00fameros, est\u00e1 ingresando informaci\u00f3n (los n\u00fameros) y la calculadora procesa la informaci\u00f3n para calcular una suma acumulada que luego se muestra.</p> <pre><code>graph LR\n    A([\"Los n\u00fameros &lt;sub&gt;(Entrada)&lt;/sub&gt;\"]) --&gt; B([\"Calculos aritm\u00e9ticos &lt;sub&gt;(Proceso)&lt;/sub&gt;\"]) --&gt; C([\"Resultado de la operaci\u00f3n &lt;sub&gt;(Salida)&lt;/sub&gt;\"])</code></pre> <p>Otro ejemplo sencillo es una bomba de gasolina. A medida que llena el tanque, la bomba utiliza ciertas entradas: el precio actual de la gasolina por litro y se\u00f1ales de un sensor que lee la tasa de gasolina que fluye hacia el autom\u00f3vil. La bomba transforma esta informaci\u00f3n en informaci\u00f3n sobre cu\u00e1nta gasolina consumi\u00f3 y cu\u00e1nto dinero debe.</p> <pre><code>graph LR\n    A([\"Precio y cantidad de litros &lt;sub&gt;(Entrada)&lt;/sub&gt;\"]) --&gt; B([\"Calculos aritm\u00e9ticos &lt;sub&gt;(Proceso)&lt;/sub&gt;\"]) --&gt; C([\"Total a pagar &lt;sub&gt;(Salida)&lt;/sub&gt;\"])</code></pre> <p>No considerar\u00edamos ni la calculadora ni el surtidor de gasolina como computadoras completas, porque son sistemas dise\u00f1ados para realizar una tarea \u00fanica y espec\u00edfica, mientras que una computadora completa funciona bajo el control de un programa modificable. \u00bfQu\u00e9 significa esto exactamente?</p> <p>\u00bfQu\u00e9 es un programa?</p> <p>Un programa es un conjunto detallado de instrucciones paso a paso que le dicen a una computadora exactamente qu\u00e9 hacer.</p> <p>Si cambiamos el programa, entonces la computadora realiza una secuencia diferente de acciones y, por lo tanto, realiza una tarea diferente. Es esta flexibilidad la que permite que tu PC sea en un momento un procesador de textos, en el siguiente un planificador financiero y, m\u00e1s tarde, un juego de arcade. La m\u00e1quina sigue siendo la misma, pero el programa que la controla cambia.</p> <p>Cada computadora es solo una m\u00e1quina para ejecutar (realizar) programas. Hay muchos tipos diferentes de computadoras. Es posible que est\u00e9s familiarizado con MACs, PC, laptops, tabletas y tel\u00e9fonos inteligentes, pero hay literalmente miles de otros tipos de computadoras, tanto reales como te\u00f3ricas. Uno de los descubrimientos notables de la inform\u00e1tica es la constataci\u00f3n de que todas estas computadoras diferentes tienen el mismo poder; Con una programaci\u00f3n adecuada, cada computadora puede hacer b\u00e1sicamente todas las cosas que cualquier otra computadora puede hacer. En este sentido, la PC que puedas tener sobre tu escritorio es realmente una m\u00e1quina universal. Puede hacer cualquier cosa que desees, siempre que puedas describir la tarea a realizar con suficiente detalle. \u00a1Esa s\u00ed que es una m\u00e1quina poderosa!</p>"},{"location":"Capitulos/01_Computadoras_y_programas/#12-el-poder-de-los-programas","title":"1.2. El poder de los programas","text":"<p>Ya has aprendido una importante lecci\u00f3n de inform\u00e1tica: el software (programas) gobierna el hardware (la m\u00e1quina f\u00edsica). </p> <p>Es el software el que determina lo que cualquier computadora puede hacer. Sin software, las computadoras ser\u00edan simplemente pisapapeles costosos. El proceso de creaci\u00f3n de software se llama programaci\u00f3n y ese es el tema principal de esta gu\u00eda.</p> <p>La programaci\u00f3n inform\u00e1tica es una actividad desafiante. La buena programaci\u00f3n requiere la capacidad de ver el panorama general y al mismo tiempo prestar atenci\u00f3n a los detalles minuciosos. No todo el mundo tiene el talento para convertirse en un programador de primera, del mismo modo que no todo el mundo tiene las habilidades para ser un atleta profesional. Sin embargo, pr\u00e1cticamente cualquier persona puede aprender a programar computadoras. Con un poco de paciencia y esfuerzo de tu parte, esta gu\u00eda te ayudar\u00e1 a convertirte en programador.</p> <p>Hay muchas buenas razones para aprender a programar. La programaci\u00f3n es una parte fundamental de la inform\u00e1tica y, por lo tanto, es importante para cualquier persona interesada en convertirse en un profesional de la inform\u00e1tica. Pero otros tambi\u00e9n pueden beneficiarse de la experiencia. Las computadoras se han convertido en una herramienta com\u00fan en nuestra sociedad. Comprender las fortalezas y limitaciones de esta herramienta requiere conocimientos de programaci\u00f3n. Los no programadores a menudo se sienten esclavos de sus computadoras. Los programadores, sin embargo, tienen realmente el control. Si deseas aprovechar al m\u00e1ximo tu computadora, debes aprender a programar.</p> <p>La programaci\u00f3n tambi\u00e9n puede ser muy divertida. Es una actividad intelectualmente atractiva que permite a las personas expresarse a trav\u00e9s de creaciones \u00fatiles y, a veces, notablemente hermosas. Lo creas o no, muchas personas escriben programas de computadora como pasatiempo. La programaci\u00f3n tambi\u00e9n desarrolla valiosas habilidades para la resoluci\u00f3n de problemas, especialmente la capacidad de analizar sistemas complejos reduci\u00e9ndolos a interacciones de subsistemas comprensibles.</p>"},{"location":"Capitulos/01_Computadoras_y_programas/#13-que-es-la-informatica","title":"1.3. \u00bfQu\u00e9 es la inform\u00e1tica?","text":"<p>Quiz\u00e1s te sorprenda saber que la inform\u00e1tica no es el estudio de las computadoras.  Un famoso inform\u00e1tico llamado Edsger Dijkstra brome\u00f3 una vez diciendo que las computadoras son para la inform\u00e1tica lo que los telescopios son para la astronom\u00eda. La computadora es una herramienta importante en inform\u00e1tica, pero no es en s\u00ed misma el objeto de estudio. Dado que una computadora puede llevar a cabo cualquier proceso que podamos describir, la verdadera pregunta es: \"\u00bfQu\u00e9 procesos podemos describir?\" </p> <p>Para decirlo de otra manera, la cuesti\u00f3n fundamental de la inform\u00e1tica es simplemente \"\u00bfQu\u00e9 informaci\u00f3n se puede procesar autom\u00e1ticamente?\" Los inform\u00e1ticos utilizan numerosas t\u00e9cnicas de investigaci\u00f3n para responder a esta pregunta. Los tres principales son: </p> <ul> <li> <p>El dise\u00f1o </p> </li> <li> <p>El an\u00e1lisis </p> </li> <li> <p>La experimentaci\u00f3n</p> </li> </ul>"},{"location":"Capitulos/01_Computadoras_y_programas/#diseno","title":"Dise\u00f1o","text":"<p>Una manera de demostrar que un problema particular puede resolverse es dise\u00f1ar realmente una soluci\u00f3n. Es decir, desarrollamos un proceso paso a paso para lograr el resultado deseado. Los inform\u00e1ticos llaman a esto algoritmo. Es una palabra elegante que b\u00e1sicamente significa \"receta\". El dise\u00f1o de algoritmos es una de las facetas m\u00e1s importantes de la inform\u00e1tica. En esta gu\u00eda encontrar\u00e1s t\u00e9cnicas para dise\u00f1ar e implementar algoritmos.</p> Definici\u00f3n de algoritmo <p>En matem\u00e1ticas, l\u00f3gica, ciencias de la computaci\u00f3n y disciplinas relacionadas, un algoritmo es un conjunto de instrucciones o reglas definidas, no-ambiguas, ordenadas y finitas que permite, t\u00edpicamente, solucionar un problema.</p> <p>Una debilidad del dise\u00f1o es que s\u00f3lo puede responder a la pregunta \"\u00bfQu\u00e9 es automatizable?\". Si puedo idear un algoritmo, entonces el problema tiene soluci\u00f3n. Sin embargo, no encontrar un algoritmo no significa que el problema no tenga soluci\u00f3n. Puede significar que simplemente no soy lo suficientemente inteligente o que a\u00fan no se me ha ocurrido la idea correcta. Aqu\u00ed es donde entra el an\u00e1lisis.</p>"},{"location":"Capitulos/01_Computadoras_y_programas/#analisis","title":"An\u00e1lisis","text":"<p>El an\u00e1lisis es el proceso de examinar algoritmos y problemas matem\u00e1ticamente. Los inform\u00e1ticos han demostrado que algunos problemas aparentemente simples no pueden resolverse mediante ning\u00fan algoritmo. Otros problemas son intratables. Los algoritmos que resuelven estos problemas toman demasiado tiempo o requieren demasiada memoria para tener valor pr\u00e1ctico. El an\u00e1lisis de algoritmos es una parte importante de la inform\u00e1tica; A lo largo de esta gu\u00eda abordaremos algunos de los principios fundamentales. La secci\u00f3n Dise\u00f1o de algortimos y recursi\u00f3n tiene ejemplos de problemas irresolubles e intratables.</p>"},{"location":"Capitulos/01_Computadoras_y_programas/#experimentacion","title":"Experimentaci\u00f3n","text":"<p>Algunos problemas son demasiado complejos o est\u00e1n mal definidos para prestarse a un an\u00e1lisis. En tales casos, los inform\u00e1ticos se basan en la experimentaci\u00f3n; en realidad implementan sistemas y luego estudian el comportamiento resultante. Incluso cuando se realiza un an\u00e1lisis te\u00f3rico, a menudo se necesita experimentaci\u00f3n para verificar y refinar el an\u00e1lisis. Para la mayor\u00eda de los problemas, lo fundamental es si se puede construir un sistema que funcione y sea confiable. A menudo requerimos pruebas emp\u00edricas del sistema para determinar que se ha cumplido este objetivo. Cuando comiences a escribir tus propios programas, tendr\u00e1s muchas oportunidades para observar tus soluciones en acci\u00f3n.</p> <p>Hemos definido la inform\u00e1tica en t\u00e9rminos de dise\u00f1o, an\u00e1lisis y evaluaci\u00f3n de algoritmos, y este es sin duda el n\u00facleo de la disciplina acad\u00e9mica. Hoy en d\u00eda, sin embargo, los inform\u00e1ticos participan en actividades muy amplias, todas las cuales caen bajo el paraguas general de la inform\u00e1tica. Algunos ejemplos incluyen computaci\u00f3n m\u00f3vil, redes, interacci\u00f3n persona-computadora, inteligencia artificial, ciencia computacional (uso de computadoras poderosas para modelar procesos cient\u00edficos), bases de datos y miner\u00eda de datos, ingenier\u00eda de software, dise\u00f1o web y multimedia, producci\u00f3n musical, sistemas de gesti\u00f3n de informaci\u00f3n y seguridad inform\u00e1tica. Dondequiera que se existan computadoras, se aplican las habilidades y conocimientos de la inform\u00e1tica.</p>"},{"location":"Capitulos/01_Computadoras_y_programas/#14-conceptos-basicos-de-hardware","title":"1.4. Conceptos b\u00e1sicos de hardware","text":"<p>No es necesario conocer todos los detalles de c\u00f3mo funciona una computadora para ser un programador exitoso, pero comprender los principios subyacentes te ayudar\u00e1 a dominar el procedimiento para poner nuestros programas en acci\u00f3n. Es un poco como conducir un coche. Saber un poco sobre los motores de combusti\u00f3n interna ayuda a explicar por qu\u00e9 hay que hacer cosas como llenar el tanque de gasolina, arrancar el motor, pisar el acelerador, etc. Podr\u00edas aprender a conducir simplemente memorizando qu\u00e9 hacer, pero un poco m\u00e1s de conocimiento hace que todo el proceso sea mucho m\u00e1s comprensible. Tom\u00e9monos un momento para mirar qu\u00e9 hay dentro de tu computadora.</p> <pre><code>graph LR\n    input[Dispositivos de Entrada] --&gt; A[\" \"]\n\n    subgraph A[\" \"]\n        CPU --&gt; memory[Memoria Principal]\n        memory[Memoria Principal] --&gt; CPU\n    end\n\n    A --&gt; secondary_memory[Memoria Secundaria]\n    secondary_memory[Memoria Secundaria] --&gt; A\n    A --&gt; output[Dispositivos de Salida]</code></pre> <p>Aunque diferentes computadoras pueden variar significativamente en detalles espec\u00edficos, en general todas las computadoras digitales modernas son notablemente similares. El gr\u00e1fico anterior muestra una vista funcional de una computadora. La unidad central de procesamiento (CPU) es el \"cerebro\" de la m\u00e1quina. Aqu\u00ed es donde se llevan a cabo todas las operaciones b\u00e1sicas de la computadora. La CPU puede realizar operaciones aritm\u00e9ticas simples como sumar dos n\u00fameros y tambi\u00e9n puede realizar operaciones l\u00f3gicas como comparar si dos n\u00fameros son iguales.</p> <p>La memoria almacena programas y datos. La CPU puede acceder directamente s\u00f3lo a la informaci\u00f3n almacenada en la memoria principal, llamada RAM que significa \"Memoria de Acceso Aleatorio\". La memoria principal es r\u00e1pida, pero tambi\u00e9n vol\u00e1til. Es decir, cuando se corta la alimentaci\u00f3n, la informaci\u00f3n de la memoria se pierde. Por tanto, tambi\u00e9n debe haber alguna memoria secundaria que proporcione un almacenamiento m\u00e1s permanente.</p> <p>En una computadora personal moderna, la memoria secundaria suele ser una unidad de disco duro interna (HDD) o una unidad de estado s\u00f3lido (SSD). Un HDD almacena informaci\u00f3n como patrones magn\u00e9ticos en un disco giratorio, mientras que un SSD emplea circuitos electr\u00f3nicos conocidos como memoria flash. La mayor\u00eda de las computadoras tambi\u00e9n admiten medios extra\u00edbles para la memoria secundaria, como \"memorias USB\" (tambi\u00e9n una forma de memoria flash) y DVD (discos vers\u00e1tiles digitales), que almacenan informaci\u00f3n como patrones \u00f3pticos que se leen y escriben mediante un l\u00e1ser.</p> <p>Los humanos interact\u00faan con la computadora a trav\u00e9s de dispositivos de entrada y salida. Probablemente est\u00e9s familiarizado con dispositivos comunes como el teclado, el mouse y el monitor (pantalla de video). El CPU procesa la informaci\u00f3n de los dispositivos de entrada y puede transferirse a la memoria principal o secundaria. De manera similar, cuando es necesario mostrar informaci\u00f3n, la CPU la env\u00eda a uno o m\u00e1s dispositivos de salida.</p> <p>Entonces, \u00bfqu\u00e9 sucede cuando inicias tu juego o programa de procesamiento de textos favorito? Primero, las instrucciones que componen el programa se copian desde la persistente memoria secundaria a la vol\u00e1til memoria principal de la computadora.</p> <p>Una vez cargadas las instrucciones, la CPU comienza a ejecutar el programa.</p> <p>T\u00e9cnicamente, la CPU sigue un proceso llamado ciclo de b\u00fasqueda-ejecuci\u00f3n. La primera instrucci\u00f3n se recupera de la memoria, se decodifica para descubrir qu\u00e9 representa, y ejecuta la acci\u00f3n apropiada. Luego busca, decodifica y ejecuta la siguiente instrucci\u00f3n. El ciclo contin\u00faa, instrucci\u00f3n tras instrucci\u00f3n. En realidad, esto es todo lo que hace la computadora desde el momento en que la enciendes hasta que la vuelves a apagar: buscar, decodificar y ejecutar. No parece muy emocionante, \u00bfverdad? Pero la computadora puede ejecutar este flujo de instrucciones simples a una velocidad vertiginosa, pasando por miles de millones de instrucciones cada segundo. Si re\u00fane suficientes instrucciones sencillas en la forma correcta, la computadora har\u00e1 cosas asombrosas.</p>"},{"location":"Capitulos/01_Computadoras_y_programas/#15-lenguajes-de-programacion","title":"1.5. Lenguajes de programaci\u00f3n","text":"<p>Recuerda que un programa es s\u00f3lo una secuencia de instrucciones que le dicen a una computadora qu\u00e9 hacer. Obviamente, debemos proporcionar esas instrucciones en un idioma que una computadora pueda entender. Ser\u00eda bueno si pudi\u00e9ramos decirle a una computadora qu\u00e9 hacer usando nuestra lengua materna, como lo hacen en las pel\u00edculas de ciencia ficci\u00f3n. Los cient\u00edficos computacionales han hecho grandes avances en esta direcci\u00f3n; Es posible que est\u00e9s familiarizado con tecnolog\u00edas como Siri (Apple), Google Now (Android) y Cortana (Microsoft). Pero como puede atestiguar cualquiera que haya utilizado seriamente estos sistemas, dise\u00f1ar un programa inform\u00e1tico para comprender plenamente el lenguaje humano sigue siendo un problema sin resolver, aunque cada vez es m\u00e1s facil interactuar con IAs como los chats que usan modelos como GPT.</p> <p>Incluso si las computadoras pudieran entendernos, los lenguajes humanos no son muy adecuados para describir algoritmos complejos. El lenguaje natural est\u00e1 plagado de ambig\u00fcedad e imprecisi\u00f3n. Por ejemplo, si digo \"Vi al hombre en el parque con el telescopio\", \u00bften\u00eda yo el telescopio o el hombre? \u00bfY qui\u00e9n estaba en el parque? Nos entendemos la mayor parte del tiempo s\u00f3lo porque todos los humanos compartimos un vasto acervo de conocimientos y experiencias comunes. Incluso entonces, la falta de comunicaci\u00f3n es algo com\u00fan.</p> <p>Los matem\u00e1ticos/inform\u00e1ticos han solucionado este problema dise\u00f1ando notaciones para expresar los c\u00e1lculos de una manera exacta e inequ\u00edvoca. Estas notaciones especiales se denominan lenguajes de programaci\u00f3n. Cada estructura en un lenguaje de programaci\u00f3n tiene una forma precisa (su sintaxis) y un significado preciso (su sem\u00e1ntica). </p> <p>Un lenguaje de programaci\u00f3n es algo as\u00ed como un c\u00f3digo para escribir las instrucciones que seguir\u00e1 una computadora. De hecho, los programadores suelen referirse a sus programas como c\u00f3digo de computadora, y el proceso de escribir un algoritmo en un lenguaje de programaci\u00f3n se llama codificaci\u00f3n.</p> <p>Python es un ejemplo de lenguaje de programaci\u00f3n y es el lenguaje que usaremos a lo largo de esta gu\u00eda. Es posible que hayas o\u00eddo hablar de otros lenguajes de uso com\u00fan, como C++, Java, Javascript, Ruby, Perl, Scheme o BASIC. Los inform\u00e1ticos han desarrollado literalmente miles de lenguajes de programaci\u00f3n, y los propios lenguajes evolucionan con el tiempo dando lugar a m\u00faltiples versiones, a veces muy diferentes. Aunque estos lenguajes difieren en muchos detalles, todos comparten la propiedad de tener una sintaxis y una sem\u00e1ntica bien definidas y sin ambig\u00fcedades.</p> <p>Todos los lenguajes mencionados anteriormente son ejemplos de lenguajes inform\u00e1ticos de alto nivel. Aunque son precisos, est\u00e1n dise\u00f1ados para ser utilizados y comprendidos por humanos. Estrictamente hablando, el hardware de una computadora s\u00f3lo puede comprender un lenguaje de muy bajo nivel conocido como lenguaje de m\u00e1quina.</p> <p>Supongamos que queremos que la computadora sume dos n\u00fameros. Las instrucciones que realmente lleva a cabo la CPU podr\u00edan ser algo como esto:</p> <pre><code>    LOAD R1, 2001   ; Cargar el n\u00famero desde la direcci\u00f3n de memoria 2001 en el registro R1\n    LOAD R2, 2002   ; Cargar el n\u00famero desde la direcci\u00f3n de memoria 2002 en el registro R2\n    ADD R1, R2      ; Sumar el contenido de los registros R1 y R2 y almacenar el resultado en R1\n    STORE 2003, R1  ; Almacenar el contenido del registro R1 en la direcci\u00f3n de memoria 2003\n</code></pre> <p>Parece mucho trabajo sumar dos n\u00fameros, \u00bfno? En realidad, es incluso m\u00e1s complicado que esto porque las instrucciones y los n\u00fameros se representan en notaci\u00f3n binaria (como secuencias de O y 1).</p> <pre><code>    0001 01 0000 0111 1101 ; LOAD R1, 2001\n    0001 10 0000 0111 1101 ; LOAD R2, 2002\n    0010 01 10 ; ADD R1, R2\n    0011 01 0000 0111 1101 ; STORE 2003, R1\n</code></pre> <p>En un lenguaje de alto nivel como Python, la suma de dos n\u00fameros se puede expresar de forma m\u00e1s natural: c = a + b. </p> <p>Esto es mucho m\u00e1s f\u00e1cil de entender para nosotros, pero necesitamos alguna forma de traducir el lenguaje de alto nivel al lenguaje de m\u00e1quina que la computadora pueda ejecutar.</p> <p>Hay dos formas de hacer esto: un lenguaje de alto nivel puede compilarse o interpretarse.</p> <p>Un compilador es un programa inform\u00e1tico complejo que toma otro programa escrito en un lenguaje de alto nivel y lo traduce a un programa equivalente en el lenguaje de m\u00e1quina de alguna computadora.</p> <p>El programa de alto nivel se llama c\u00f3digo fuente y el c\u00f3digo de m\u00e1quina resultante es un programa ejecutable con el que la computadora puede interactuar directamente.</p> <p>El usuario final solamente abre (ejecuta) el programa ejecutable e interact\u00faa con \u00e9l ingresando datos (entradas) y recibiendo los resultados (salidas).</p> <pre><code>graph LR\n    A([\"C\u00f3digo Fuente (Programa)\"]) --&gt; B[Compilador] \n    B[Compilador] --&gt; C([C\u00f3digo m\u00e1quina])\n    C -.-&gt; D \n    subgraph sub1 [ ]\n        E([Entradas]) --&gt; D[Programa Ejecutable]\n        D --&gt; F([Salidas])\n    end</code></pre> <p>Un int\u00e9rprete es un programa que simula una computadora que comprende un lenguaje de alto nivel. En lugar de traducir el programa fuente a un equivalente en lenguaje de m\u00e1quina, el int\u00e9rprete analiza y ejecuta el c\u00f3digo fuente instrucci\u00f3n por instrucci\u00f3n seg\u00fan sea necesario.</p> <pre><code>graph LR\n    A([\"C\u00f3digo Fuente (Programa)\"]) --&gt; B[Computadora corriendo un int\u00e9rprete]\n    D([Entradas]) --&gt; B\n    B --&gt; E([Salidas])</code></pre> <p>La diferencia entre interpretar y compilar es que la compilaci\u00f3n es una traducci\u00f3n de una sola vez; Una vez compilado un programa, se puede ejecutar una y otra vez sin necesidad del compilador o del c\u00f3digo fuente. En el caso interpretado, el int\u00e9rprete y la fuente son necesarios cada vez que se ejecuta el programa. Los programas compilados tienden a ser m\u00e1s r\u00e1pidos, ya que la traducci\u00f3n se realiza de una vez por todas, pero los lenguajes interpretados se prestan a un entorno de programaci\u00f3n m\u00e1s flexible ya que los programas se pueden desarrollar y ejecutar de forma interactiva.</p> <p>El proceso de traducci\u00f3n destaca otra ventaja que tienen los lenguajes de alto nivel sobre el lenguaje de m\u00e1quina: la portabilidad. El lenguaje de m\u00e1quina de una computadora lo crean los dise\u00f1adores de la CPU en particular. Cada tipo de computadora tiene su propio lenguaje de m\u00e1quina. </p> <p>Un programa para el procesador Intel i7 de tu laptop no funcionar\u00e1 directamente en una la CPU ARMv8 de tu tel\u00e9fono inteligente. Por otro lado, un programa escrito en un lenguaje de alto nivel se puede ejecutar en muchos tipos diferentes de computadoras siempre que exista un compilador o int\u00e9rprete adecuado (que no es m\u00e1s que un programa m\u00e1s). Como resultado, podemos ejecutar exactamente el mismo programa Python en una computadora port\u00e1til y en una tableta; Aunque tienen CPU diferentes, ambos cuentan con un int\u00e9rprete de Python.</p>"},{"location":"Capitulos/01_Computadoras_y_programas/#16-la-magia-de-python","title":"1.6. La m\u00e1gia de Python","text":"<p>Ahora que tienes todos los detalles t\u00e9cnicos, es hora de empezar a divertirte con Python. El objetivo final es hacer que la computadora cumpla nuestras \u00f3rdenes. Para ello, escribiremos programas que controlen los procesos computacionales dentro de la m\u00e1quina. Ya has visto que no hay magia en este proceso, pero en cierto modo la programaci\u00f3n parece m\u00e1gica. Los procesos computacionales dentro de la computadora son como esp\u00edritus m\u00e1gicos que podemos aprovechar para nuestro trabajo. </p> <p>Desafortunadamente, esos esp\u00edritus s\u00f3lo entienden un lenguaje muy arcano que nosotros desconocemos. Lo que necesitamos es un genio amigable que pueda dirigir a los esp\u00edritus para que cumplan nuestros deseos. Nuestro genio es un int\u00e9rprete de Python. Podemos dar instrucciones al int\u00e9rprete de Python y \u00e9l dirige los esp\u00edritus subyacentes para llevar a cabo nuestras demandas. </p> <p>Nos comunicamos con el genio a trav\u00e9s de un lenguaje especial de hechizos y encantamientos (es decir, Python). La mejor manera de empezar a aprender sobre Python es dejar salir a nuestro genio de la botella y probar algunos hechizos.</p> <p>Con la mayor\u00eda de las instalaciones de Python, puede iniciar un int\u00e9rprete de Python en un modo interactivo llamado shell. Un shell le permite escribir comandos de Python y luego muestra el resultado de ejecutarlos. Los detalles para iniciar un shell difieren seg\u00fan las distintas instalaciones. Si est\u00e1 utilizando la distribuci\u00f3n est\u00e1ndar de Python para PC o Mac de www.python.org, debes tener una aplicaci\u00f3n llamada IDLE (Integrated Development and Learning Environment) que te permitir\u00e1 interactuar con Python </p> <p>Si a\u00fan no tienes Python instalado, lee nuestra gu\u00eda de instalaci\u00f3n.</p> <p>Comencemos abriendo la aplicaci\u00f3n IDLE.</p> <p></p> <p>Cuando inicies IDLE (u otro shell de Python) por primera vez, deber\u00edas ver algo como esto:</p> <p></p> <p>El mensaje de apertura exacto depende de la versi\u00f3n de Python que est\u00e9s ejecutando y del sistema en el que est\u00e9s trabajando. La parte importante es la \u00faltima l\u00ednea; el  <code>&gt;&gt;&gt;</code> es un mensaje de Python que indica que nuestro genio (el int\u00e9rprete de Python) est\u00e1 esperando que le demos una orden. En los lenguajes de programaci\u00f3n, un comando completo se llama declaraci\u00f3n.</p> <p>Aqu\u00ed hay un ejemplo de interacci\u00f3n con un shell de Python:</p> <p></p> <p>Aqu\u00ed he probado tres ejemplos utilizando la declaraci\u00f3n de impresi\u00f3n (<code>print</code>) de Python. </p> <ul> <li> <p>La primera declaraci\u00f3n le pide a Python que muestre la frase literal \"Hola mundo!\". Python responde en la siguiente l\u00ednea imprimiendo la frase. </p> </li> <li> <p>La segunda declaraci\u00f3n de impresi\u00f3n le pide a Python que imprima la suma de 2 y 3. </p> </li> <li> <p>La tercera impresi\u00f3n combina estas dos ideas. Python imprime la parte entre comillas, \"2 + 3 =\", seguida del resultado de sumar 2 + 3, que es 5.</p> </li> </ul> <p>Este tipo de interacci\u00f3n de shell es una excelente manera de probar cosas nuevas en Python. A lo largo de esta gu\u00eda se encuentran fragmentos de sesiones interactivas. Cuando veas el mensaje de Python <code>&gt;&gt;&gt;</code> en un ejemplo, deber\u00eda indicarte que se est\u00e1 ilustrando una sesi\u00f3n interactiva. Es una buena idea iniciar su propio shell de Python y probar los ejemplos.</p> <p>Por lo general, queremos ir m\u00e1s all\u00e1 de los fragmentos de una l\u00ednea y ejecutar una secuencia completa de declaraciones. Python nos permite juntar una secuencia de declaraciones para crear un comando o funci\u00f3n completamente nueva. A continuaci\u00f3n se muestra un ejemplo de c\u00f3mo crear una nueva funci\u00f3n llamada \"hola\":</p> <p></p> <p>La primera l\u00ednea le dice a Python que estamos definiendo una nueva funci\u00f3n y la llamaremos hola. Las siguientes l\u00edneas tienen sangr\u00eda para mostrar que son parte de la funci\u00f3n hola. </p> <p>Nota</p> <p>Algunos shells imprimir\u00e1n puntos suspensivos [\"<code>...</code>\"] al principio de las l\u00edneas con sangr\u00eda.</p> <p>La l\u00ednea en blanco al final (que se obtiene presionando la tecla <code>&lt;ENTER&gt;</code> dos veces) le permite a Python saber que la definici\u00f3n ha finalizado y el shell responde con <code>&gt;&gt;&gt;</code> para que continuemos interactuando. Ten en cuenta que escribir la definici\u00f3n no hizo que Python imprimiera nada todav\u00eda. Le hemos dicho a Python lo que deber\u00eda suceder cuando la funci\u00f3n hola se usa como comando; En realidad, todav\u00eda no le hemos pedido a Python que lo realice.</p> <p>Una funci\u00f3n se invoca (o llama) escribiendo su nombre seguido de par\u00e9ntesis. Esto es lo que sucede cuando usamos nuestro comando hola:</p> <p></p> <p>\u00bfVes lo que esto hace? Las dos declaraciones de impresi\u00f3n de la definici\u00f3n de la funci\u00f3n hola se ejecutan en secuencia.</p> <p>Quiz\u00e1s te preguntes acerca de los par\u00e9ntesis en la definici\u00f3n y el uso de hola. Los comandos pueden tener partes variables llamadas par\u00e1metros (tambi\u00e9n llamados argumentos) que se colocan entre par\u00e9ntesis. Veamos un ejemplo de un saludo personalizado usando un par\u00e1metro. Primero la definici\u00f3n:</p> <p></p> <p>Ahora podemos utilizar nuestro saludo personalizado.</p> <p></p> <p>\u00bfPuedes ver lo que est\u00e1 pasando aqu\u00ed? Al usar saludo podemos enviar diferentes nombres para personalizar el resultado. Tambi\u00e9n puedes notar que esto se parece a las declaraciones impresas anteriores. En Python, imprimir es un ejemplo de funci\u00f3n incorporada. Cuando llamamos a la funci\u00f3n de <code>print()</code>, los par\u00e1metros entre par\u00e9ntesis le indican a la funci\u00f3n qu\u00e9 imprimir.</p> <p>Discutiremos los par\u00e1metros en detalle m\u00e1s adelante. Por el momento lo importante a recordar es que los par\u00e9ntesis deben incluirse despu\u00e9s del nombre de la funci\u00f3n siempre que queramos ejecutar una funci\u00f3n. Esto es cierto incluso cuando no se proporcionan par\u00e1metros. Por ejemplo, puede crear una l\u00ednea de salida en blanco usando <code>print</code> sin ning\u00fan par\u00e1metro.</p> <p></p> <p>Pero si escribes s\u00f3lo el nombre de la funci\u00f3n, omitiendo los par\u00e9ntesis, la funci\u00f3n en realidad no se ejecutar\u00e1. En cambio, una sesi\u00f3n interactiva de Python mostrar\u00e1 alg\u00fan resultado que indique a qu\u00e9 funci\u00f3n se refiere ese nombre, como muestra esta interacci\u00f3n:</p> <p></p> <p>El texto extra\u00f1o 0x101211da0 es la ubicaci\u00f3n (direcci\u00f3n) en la memoria de la computadora donde se almacena la definici\u00f3n de la funci\u00f3n de saludo. Si est\u00e1s probando esto en tu propia computadora, es casi seguro que ver\u00e1s una direcci\u00f3n diferente.</p> <p>Un problema al ingresar funciones interactivamente en un shell de Python como lo hicimos con los ejemplos de hola y saludo es que las definiciones se pierden cuando salimos del shell. Si queremos volver a utilizarlos la pr\u00f3xima vez, tendremos que escribirlos de nuevo. Los programas generalmente se crean escribiendo definiciones en un archivo separado llamado m\u00f3dulo o script. Este archivo se guarda en la memoria secundaria para que pueda usarse una y otra vez.</p> <p>Un archivo de m\u00f3dulo es simplemente un archivo de texto y puede crear uno usando cualquier aplicaci\u00f3n para editar texto, como un bloc de notas o un procesador de textos, siempre que guarde su programa como un archivo de \"texto sin formato\". Un tipo especial de aplicaci\u00f3n conocida como Entorno de Desarrollo Integrado (IDE) simplifica el proceso. </p> <p>Un IDE est\u00e1 dise\u00f1ado espec\u00edficamente para ayudar a los programadores a escribir programas e incluye funciones como sangr\u00eda autom\u00e1tica, resaltado de colores y desarrollo interactivo. IDLE es un buen ejemplo. Hasta ahora hemos estado usando IDLE como shell de Python, pero en realidad es un entorno de desarrollo simple pero completo.</p> <p>Ilustremos el uso de un archivo de m\u00f3dulo escribiendo y ejecutando un programa completo. Nuestro programa explorar\u00e1 un concepto matem\u00e1tico conocido como caos.</p> <p>A lo largo de la gu\u00eda desarrollaremos varios programas, por lo que sugerir\u00eda que crees una carpeta para mantener todos tus programas organizados y juntos en un espacio dedicado en tu \u00e1rea de documentos personales.</p> <p>El proceso se puede hacer de diferentes maneras, pero yo ilustrar\u00e9 como hacerlo mediante una l\u00ednea de comandos (Terminal en caso de Mac y PowerShell en caso de Windows) y el editor de c\u00f3digo VSCode, si no tienes instalado el editor de c\u00f3digo te sugerimos seguir nuestra gu\u00eda de instalaci\u00f3n de VSCode.</p> <p>Comencemos abriendo la aplicaci\u00f3n de l\u00ednea de comandos correspondiente. </p> <p>MacOS</p> <ul> <li> <p>Presiona la combinaci\u00f3n de teclas <code>&lt;COMMAND&gt;</code> y <code>&lt;ESPACIO&gt;</code> (cuando hablemos de combinaciones de teclas escibiremos las diferentes teclas separadas por un s\u00edmbolo <code>+</code>, ejemplo:<code>&lt;COMMAND&gt; + &lt;ESPACIO&gt;</code>) para desplegar el buscador spotlight.</p> <p></p> </li> <li> <p>Escribe \"Terminal\" en la barra de b\u00fasqueda de spotlight.</p> <p></p> </li> <li> <p>Notar\u00e1s que una aplicaci\u00f3n est\u00e1 resaltada en gris, bastar\u00e1 con presionar la tecla <code>&lt;ENTER&gt;</code> para ejecutarla y abrir\u00e1 una pantalla (la interfaz difererir\u00e1 de la que yo muestro), a partir de este momento me referir\u00e9 a esta interfaz que acabamos de abrir como shell.</p> <p></p> </li> </ul> <p>Windows</p> <ul> <li> <p>Presiona la combinaci\u00f3n de teclas <code>&lt;WINDOWS&gt;</code> y <code>&lt;R&gt;</code> (cuando hablemos de combinaciones de teclas escibiremos las diferentes teclas separadas por un s\u00edmbolo <code>+</code>, ejemplo:<code>&lt;WINDOWS&gt; + &lt;R&gt;</code>) para desplegar la aplicaci\u00f3n run.</p> <p></p> </li> <li> <p>Escribe \"powershell\" en la barra de b\u00fasqueda.</p> <p></p> </li> <li> <p>Para ejecutar la aplicaci\u00f3n bastar\u00e1 con presionar la tecla <code>&lt;ENTER&gt;</code> o dar click en el bot\u00f3n \"<code>OK</code>\". Abrir\u00e1 una pantalla como la siguiente, a partir de este momento me referir\u00e9 a esta interfaz que acabamos de abrir como shell.</p> <p></p> </li> </ul> <p>Deberemos crear la carpeta donde guardaremos los programas que realicemos durante esta gu\u00eda, situarnos en ella y abrirla en el editor de c\u00f3digo, para ello dentro de nuestra shell (no importa si es Windows o Mac) ingresaremos los siguientes comandos:</p> <p><pre><code>mkdir ./intro_progra\n</code></pre> <pre><code>cd ./intro_progra\n</code></pre> <pre><code>code .\n</code></pre></p> <p></p> <p>Si todo el paso anterior se ejecut\u00f3 correctamente, se debi\u00f3 abrir la aplicaci\u00f3n Visual Studio Code, primero encontraremos una advertencia que nos pregunta si confiamos en el autor de la carpeta \"intro_progra\", como nosotros mismos somos el autor, s\u00ed podemos confiar, as\u00ed que debemos dar click en el bot\u00f3n que dice \"S\u00ed, conf\u00edo en los autores (Yes, I trust the authors)\".</p> <p></p> <p>Se remover\u00e1 la ventana de autorizaci\u00f3n y tendremos nuestro editor listo para trabajar.</p> <p></p> <p>Comenzaremos ubicando el explorador de archivos, si no se ha personalizado la interfaz, lo encontraremos en la parte izquierda.</p> <p></p> <p>En el explorador tendremos var\u00edos \u00edconos, de izquierda a derecha, el primero nos permitir\u00e1 crear un nuevo archivo, el segundo crear una nueva carpeta, el tercero refrescar el explorador y el cuarto colapsar los folder abiertos en el explorador, de momento solo interactuaremos con el primer bot\u00f3n.</p> <p>Damos click en \u00e9l e inmediatamente por debajo se habilitar\u00e1 un recuadro que nos permitir\u00e1 escribir, ah\u00ed ingresaremos el nombre de nuestro fichero, en este caso ser\u00e1 \"01_caos.py\" y una vez terminemos de escribir presionaremos la tecla <code>&lt;ENTER&gt;</code>.</p> <p></p> <p>En la parte derecha del editor encontraremos nuestro archivo 01_caos.py listo para ser editado, ah\u00ed pegamos el siguiente c\u00f3digo.</p> <p></p> <pre><code># caos.py\n# Un programa que ilustra una conducta ca\u00f3tica\n\ndef main():\n    print(\"Este programa ilustra una funci\u00f3n ca\u00f3tica\") \n    x = eval(input(\"Ingresa un n\u00famero entre 0 y 1: \")) \n    for i in range(10):\n        x = 3.9 * x * (1 - x)\n        print(x)\n\nmain()\n</code></pre> <p>Una vez que lo hayas escrito, notar\u00e1s que el \u00edcono del explorador tiene una alerta azul con un n\u00famero 1, esto indica que dentro de nuestro entorno de trabajo existe un archivo que se ha editado, pero no se han guardado los cambios. </p> <p></p> <p>Para guardar el script usamos la combinaci\u00f3n de teclas <code>&lt;Ctrl+S&gt;</code> en Windows y <code>&lt;Command+S&gt;</code> en Mac.</p> <p>T\u00fa editor se deber\u00eda ver de la siguiente manera, sin alertas a la izquierda y con el c\u00f3digo completo a la derecha.</p> <p></p> <p>En este punto, es posible que est\u00e9s intentando encontrarle sentido a lo que acabas de copiar. Puedes ver que este ejemplo en particular contiene l\u00edneas para definir una nueva funci\u00f3n llamada \"main\". (Los programas suelen colocarse en una funci\u00f3n llamada main). </p> <p>La \u00faltima l\u00ednea del archivo (l\u00ednea 11) es el comando para invocar esta funci\u00f3n. No te preocupes si no comprendes qu\u00e9 hace realmente main; lo discutiremos en la siguiente secci\u00f3n. El punto aqu\u00ed es que una vez que tenemos un programa guardado en un archivo de m\u00f3dulo como este, podemos ejecutarlo cuando queramos.</p> <p>Nuestro programa se puede ejecutar de varias maneras diferentes que dependen del sistema operativo real y del entorno de programaci\u00f3n que est\u00e9s utilizando.</p> <p>Nosotros lo ejecutaremos desde nuestra shell, para ello debemos retomar nuestra shell desde la que creamos la carpeta y abrimos el VSCode.</p> <p>Si estamos en Windows nuestra shell debe verse as\u00ed.</p> <p></p> <p>Si estamos en Mac nuestra shell debe verse as\u00ed.</p> <p></p> <p>El comando que nos ejecutar nuestro programa en Windows es:</p> <pre><code>python 01_caos.py\n</code></pre> <p></p> <p>El comando que nos ejecutar nuestro programa en Mac es:</p> <pre><code>python3 01_caos.py\n</code></pre> <p></p> <p>El programa en ejecuci\u00f3n le pide al usuario que ingrese un n\u00famero entre 0 y 1 yo escribir\u00e9 \".25\".</p> <p></p> <p>Lo que ocurri\u00f3 aqu\u00ed es que le indicamos a la computadora que ejecutar\u00e1 la serie de instrucciones que definimos en el programa 01_caos.py con Python, Python interpreta el m\u00f3dulo (programa) de arriba a abajo, l\u00ednea por l\u00ednea. Es como si los hubi\u00e9ramos escrito uno por uno en el indicador interactivo de Python. </p> <p>La definici\u00f3n en el m\u00f3dulo hace que Python cree la funci\u00f3n principal (l\u00edneas 4 a 9). La \u00faltima l\u00ednea (l\u00ednea 11) de este m\u00f3dulo hace que Python invoque la funci\u00f3n principal, ejecutando as\u00ed nuestro programa. </p> <p>El programa ya en ejecuci\u00f3n le pide al usuario que ingrese un n\u00famero entre 0 y 1 y luego imprime una serie de 10 n\u00fameros.</p> Compilaci\u00f3n/interpretaci\u00f3n en Python <p>Python es un lenguaje interpretado, pero cuenta con un proceso h\u00edbrido de compilaci\u00f3n/interpretaci\u00f3n.</p> <p>Si ejecutamos el c\u00f3digo fuente mediante el comando:</p> <pre><code>python 01_caos.py\n</code></pre> <p>Solamente estamos interpretando. Sin embargo, es posible que el c\u00f3digo fuente de Python en el archivo del m\u00f3dulo (01_caos.py) se compile en instrucciones m\u00e1s primitivas llamadas c\u00f3digo de bytes.</p> <p>\u00bfPor qu\u00e9 har\u00edamos eso?</p> <p>Porque tener un archivo en c\u00f3digo de bytes hace que la ejecuci\u00f3n sea m\u00e1s r\u00e1pida la segunda vez. Si el c\u00f3digo de un m\u00f3dulo se va a emplear en repetidas ocasiones, vale la pena que exista en c\u00f3digo de bytes.</p> <p>Para que Python compile nuestro m\u00f3dulo, empleamos el comando:</p> <p><pre><code>python -m py_compile 01_caos.py\n</code></pre> Este comando no interpretar\u00e1 el c\u00f3digo permitiendo que interactuemos inmediatamente con \u00e9l. En su lugar, crear\u00e1 una carpeta llamada pycache dentro de la carpeta donde se almacenan los archivos de nuestro m\u00f3dulo. Este es un lugar donde Python guardar\u00e1 archivos complementarios con extensi\u00f3n .pyc (los archivos .pyc son las versiones en c\u00f3digo de bytes de nuestro c\u00f3digo fuente).</p> <p>En este ejemplo, Python podr\u00eda crear otro archivo llamado 01_caos.pyc.</p> <p>Tener un archivo .pyc disponible hace que la ejecuci\u00f3n de un m\u00f3dulo sea m\u00e1s r\u00e1pida la segunda vez. Sin embargo, puede eliminar los archivos de c\u00f3digo de bytes si desea ahorrar espacio en el disco; Python los recrear\u00e1 autom\u00e1ticamente seg\u00fan sea necesario.</p> <p>Generalmente no tendr\u00e1s que hacer la compilaci\u00f3n manual de tus m\u00f3dulos de Python, \u00e9l interprete est\u00e1 programado para saber cuando optimizar un m\u00f3dulo. </p>"},{"location":"Capitulos/01_Computadoras_y_programas/#17-dentro-de-un-programa-de-python","title":"1.7. Dentro de un programa de Python","text":"<p>El resultado del programa 01_caos.py puede no parecer muy relevante, pero ilustra un fen\u00f3meno muy interesante conocido por f\u00edsicos y matem\u00e1ticos. Echemos un vistazo a este programa l\u00ednea por l\u00ednea y veamos qu\u00e9 hace. No te preocupes por comprender cada detalle de inmediato; Volveremos a todas estas ideas en la pr\u00f3xima secci\u00f3n.</p> <p>Las dos primeras l\u00edneas del programa comienzan con el car\u00e1cter <code>#</code>:</p> <p></p> <p>Estas l\u00edneas se llaman comentarios. Est\u00e1n destinadas a los lectores humanos del programa y Python las ignora. </p> <p>El int\u00e9rprete de Python siempre omite cualquier texto desde el signo de n\u00famero (#) hasta el final de una l\u00ednea.</p> <p>La siguiente l\u00ednea del programa comienza la definici\u00f3n de una funci\u00f3n llamada main:</p> <p></p> <p>Estrictamente hablando, no ser\u00eda necesario crear una funci\u00f3n main. Dado que las l\u00edneas de un m\u00f3dulo se ejecutan a medida que se cargan, podr\u00edamos haber escrito nuestro programa sin esta definici\u00f3n. Es decir, el m\u00f3dulo podr\u00eda haber quedado as\u00ed:</p> <p></p> <p>Esta versi\u00f3n es un poco m\u00e1s corta, pero se acostumbra colocar las instrucciones que componen un programa dentro de una funci\u00f3n llamada main. </p> <p>Un beneficio inmediato de este enfoque se ilustr\u00f3 anteriormente; nos permite ejecutar el programa simplemente invocando <code>main()</code>. No tenemos que reiniciar el shell de Python para ejecutarlo nuevamente, lo cual ser\u00eda necesario en el caso sin main.</p> <p>La primera l\u00ednea dentro de main es realmente el comienzo de nuestro programa.</p> <p></p> <p>Esta l\u00ednea hace que Python imprima un mensaje presentando el programa cuando se ejecuta.</p> <p>Veamos la siguiente l\u00ednea del programa:</p> <p></p> <p>Aqu\u00ed <code>x</code> es un ejemplo de una variable. Una variable se utiliza para darle un nombre a un valor para que podamos hacer referencia a \u00e9l en otros puntos del programa.</p> <p>La l\u00ednea completa es una declaraci\u00f3n para obtener informaci\u00f3n del usuario. Est\u00e1n sucediendo muchas cosas en esta l\u00ednea y discutiremos los detalles en el pr\u00f3ximo cap\u00edtulo; por ahora, s\u00f3lo necesitas saber qu\u00e9 logra. </p> <p>Cuando Python llega a esta declaraci\u00f3n, muestra el mensaje citado \"Ingrese un n\u00famero entre 0 y 1:\" y luego hace una pausa, esperando que el usuario escriba algo en el teclado y presione la tecla <code>&lt;ENTER&gt;</code>. </p> <p>El valor que escribe el usuario se almacena como la variable x. En el primer ejemplo mostrado arriba, el usuario ingres\u00f3 . 25, que se convierte en el valor de x.</p> <p>La siguiente declaraci\u00f3n es un ejemplo de un bucle.</p> <p></p> <p>Un bucle es un mecanismo que le dice a Python que haga lo mismo una y otra vez. Este bucle en particular dice que hagamos algo 10 veces. Las l\u00edneas con sangr\u00eda debajo del encabezado del bucle son declaraciones que se realizan 10 veces. Estos forman el cuerpo del bucle.</p> <p></p> <p>El efecto del bucle es exactamente el mismo que si hubi\u00e9ramos escrito el cuerpo del bucle 10 veces:</p> <p></p> <p>Obviamente, usar el bucle le ahorra muchos problemas al programador.</p> <p>Pero \u00bfqu\u00e9 hacen exactamente estas declaraciones? </p> <p>La primera realiza un c\u00e1lculo.</p> <p><code>x = 3.9 * x * (1 - x)</code></p> <p>A esto se le llama declaraci\u00f3n de asignaci\u00f3n. </p> <p>La parte del lado derecho del <code>=</code> es una expresi\u00f3n matem\u00e1tica (<code>3.9 * x * (1 - x)</code>). </p> <p>Python usa el car\u00e1cter <code>*</code> para indicar la multiplicaci\u00f3n. </p> <p>Recuerde que el valor de <code>x</code> es <code>0.25</code> (en la entrada de ejemplo). </p> <p>El valor calculado es <code>3.9(0.25)(1 - 0.25)</code>. </p> <p>Una vez que se calcula el valor del lado derecho, se guarda (o se asigna) en la variable que aparece en el lado izquierdo del <code>=</code>, en este caso <code>x</code>. El nuevo valor de <code>x</code> (<code>0.73125</code>) reemplaza el valor anterior (<code>0.25</code>).</p> <p>La segunda l\u00ednea en el cuerpo del bucle es un tipo de declaraci\u00f3n que hemos encontrado antes, una declaraci\u00f3n de <code>print()</code>, que imprime el valor de <code>x</code>.</p> <p>Cuando Python ejecuta esta declaraci\u00f3n, el valor actual de <code>x</code> se muestra en la pantalla. Entonces, el primer n\u00famero de salida es <code>0.73125</code>.</p> <p>Recuerde que el bucle se ejecuta 10 veces. Despu\u00e9s de imprimir el valor de <code>x</code>, las dos declaraciones del bucle se ejecutan nuevamente.</p> <p>Por supuesto, ahora <code>x</code> tiene el valor <code>0.73125</code>, por lo que la f\u00f3rmula calcula un nuevo valor de <code>x</code> como <code>3.9(0.73125)(1 - 0.73125)</code>, que es <code>0.76644140625</code>.</p> <p>\u00bfPuedes ver c\u00f3mo se usa el valor actual de x para calcular un nuevo valor cada vez que se realiza el ciclo? </p> <p>De ah\u00ed provienen los n\u00fameros del ejemplo. Puedes intentar seguir los pasos del programa tu mismo con tu calculadora para un valor de entrada diferente (por ejemplo, 0.5), anota los resultados en un cuaderno y toma el tiempo que tardas en hacer las 10 iteraciones. </p> <p>Luego ejecuta el programa usando Python y ve qu\u00e9 tan bien te fue haci\u00e9ndote pasar por una computadora.</p>"},{"location":"Capitulos/01_Computadoras_y_programas/#18-caos-y-computadoras","title":"1.8. Caos y computadoras","text":"<p>Anteriormente dije que el programa 01_caos.py ilustra un fen\u00f3meno interesante. \u00bfQu\u00e9 podr\u00eda tener de interesante una pantalla llena de n\u00fameros? Si pruebas el programa por ti mismo, descubrir\u00e1s que, sin importar con qu\u00e9 n\u00famero comiences, el programa devuelve 10 n\u00fameros aparentemente aleatorios entre 0 y 1. A medida que se ejecuta el programa, el valor de x parece saltar, sin ning\u00fan patr\u00f3n, es decir ca\u00f3ticamente.</p> <p>La funci\u00f3n calculada por este programa tiene la forma general: <code>k(x)(1 - x)</code>, donde <code>k</code> en este caso es <code>3. 9</code>. </p> <p>Esto se llama funci\u00f3n log\u00edstica. Modela ciertos tipos de circuitos electr\u00f3nicos inestables y a veces tambi\u00e9n se utiliza para modelar la variaci\u00f3n de la poblaci\u00f3n en condiciones l\u00edmite. La aplicaci\u00f3n repetida de la funci\u00f3n log\u00edstica puede producir caos. Aunque nuestro programa tiene un comportamiento subyacente bien definido, el resultado parece impredecible.</p> <p>Una propiedad interesante de las funciones ca\u00f3ticas es que diferencias muy peque\u00f1as en el valor inicial pueden generar grandes diferencias en el resultado cuando la f\u00f3rmula se aplica repetidamente. Puedes ver esto en nuestro programa, ingresando n\u00fameros que difieren s\u00f3lo en una peque\u00f1a cantidad (una cent\u00e9sima por ejemplo). </p> <p>Aqu\u00ed est\u00e1 el resultado de un programa modificado que muestra los resultados para los valores iniciales de 0.25 y 0.26 uno al lado del otro:</p> <p></p> <p>Con valores iniciales muy similares, los resultados permanecen similares durante algunas iteraciones, pero luego difieren notablemente. Aproximadamente en la quinta iteraci\u00f3n, ya no parece haber ninguna relaci\u00f3n entre los dos modelos.</p> <p>Estas dos caracter\u00edsticas de nuestro programa 01_caos.py, la aparente imprevisibilidad y la extrema sensibilidad a los valores iniciales, son las caracter\u00edsticas distintivas del comportamiento ca\u00f3tico. </p> <p>El caos tiene implicaciones importantes para la inform\u00e1tica. Resulta que muchos fen\u00f3menos del mundo real que nos gustar\u00eda modelar y predecir con nuestras computadoras exhiben precisamente este tipo de comportamiento ca\u00f3tico.</p> <p>Seguramente habr\u00e1s o\u00eddo hablar del llamado efecto mariposa. Los modelos inform\u00e1ticos que se utilizan para simular y predecir patrones clim\u00e1ticos son tan sensibles que, el efecto de una sola mariposa batiendo sus alas en Nueva Jersey podr\u00eda marcar la diferencia en si se pronostica lluvia o no en Illinois.</p> <p>Es muy posible que incluso con un modelo inform\u00e1tico perfecto, nunca podamos medir las condiciones meteorol\u00f3gicas existentes con suficiente precisi\u00f3n como para predecir el tiempo con m\u00e1s de unos pocos d\u00edas de antelaci\u00f3n. Las mediciones simplemente no pueden ser lo suficientemente precisas como para que las predicciones sean precisas en un per\u00edodo de tiempo m\u00e1s largo.</p> <p>Como puedes ver, este peque\u00f1o programa tiene una valiosa lecci\u00f3n para ense\u00f1ar a los usuarios de computadoras. </p> <p>Por m\u00e1s sorprendentes que sean las computadoras, los resultados que nos brindan son tan \u00fatiles como los modelos matem\u00e1ticos en los que se basan los programas. </p> <p>Las computadoras pueden dar resultados incorrectos debido a errores en los programas, pero incluso los programas correctos pueden producir resultados err\u00f3neos si los modelos son incorrectos o las entradas iniciales no son lo suficientemente precisas.</p>"},{"location":"Capitulos/01_Computadoras_y_programas/#19-resumen-de-la-seccion","title":"1.9. Resumen de la secci\u00f3n","text":"<p>En esta secci\u00f3n se han introducido los siguientes conceptos las computadoras, la inform\u00e1tica y la programaci\u00f3n. A continuaci\u00f3n se muestra un resumen de algunos de los conceptos clave:</p> <ul> <li> <p>Una computadora es una m\u00e1quina universal de procesamiento de informaci\u00f3n. Puede llevar a cabo cualquier proceso que pueda describirse con suficiente detalle. Una descripci\u00f3n de la secuencia de pasos para resolver un problema particular se llama algoritmo. Los algoritmos se pueden convertir en software (programas) que determina lo que el hardware (m\u00e1quina f\u00edsica) puede lograr. El proceso de creaci\u00f3n de software se llama programaci\u00f3n.</p> </li> <li> <p>La inform\u00e1tica es el estudio de la informaci\u00f3n que se puede procesar autom\u00e1ticamente. Los inform\u00e1ticos utilizan las t\u00e9cnicas de dise\u00f1o, an\u00e1lisis y experimentaci\u00f3n. La inform\u00e1tica es la base \u00e1reas como redes, bases de datos y sistemas de gesti\u00f3n de la informaci\u00f3n, por nombrar algunas.</p> </li> <li> <p>Una vista funcional b\u00e1sica de un sistema inform\u00e1tico comprende una unidad central de procesamiento (CPU), memoria principal, memoria secundaria y dispositivos de entrada y salida. La CPU es el cerebro de la computadora que realiza operaciones aritm\u00e9ticas y l\u00f3gicas simples. La informaci\u00f3n sobre la que act\u00faa la CPU (datos y programas) se almacena en la memoria principal (RAM). La informaci\u00f3n m\u00e1s permanente se almacena en dispositivos de memoria secundaria, como discos magn\u00e9ticos, memoria flash y dispositivos \u00f3pticos. La informaci\u00f3n se ingresa en la computadora a trav\u00e9s de dispositivos de entrada y los dispositivos de salida muestran los resultados.</p> </li> <li> <p>Los programas se escriben utilizando una notaci\u00f3n formal conocida como lenguaje de programaci\u00f3n. Hay muchos lenguajes diferentes, pero todos comparten la propiedad de tener una sintaxis (forma) y una sem\u00e1ntica (significado) precisas. El hardware de la computadora entiende s\u00f3lo un lenguaje de muy bajo nivel conocido como lenguaje de m\u00e1quina. Los programas generalmente se escriben utilizando lenguajes de alto nivel orientados a humanos, como Python. Un lenguaje de alto nivel debe compilarse o interpretarse para que la computadora lo comprenda. Los lenguajes de alto nivel son m\u00e1s port\u00e1tiles que el lenguaje de m\u00e1quina.</p> </li> <li> <p>Python es un lenguaje interpretado. Una buena forma de aprender sobre Python es utilizar un shell interactivo para experimentar. La distribuci\u00f3n est\u00e1ndar de Python incluye un programa llamado IDLE que proporciona un shell y funciones para editar programas de Python.</p> </li> <li> <p>Un programa Python es una secuencia de comandos (llamados declaraciones) que debe ejecutar el int\u00e9rprete de Python. Python incluye declaraciones para hacer cosas como imprimir resultados en la pantalla, obtener informaci\u00f3n del usuario, calcular el valor de una expresi\u00f3n matem\u00e1tica y realizar una secuencia de declaraciones varias veces (bucle).</p> </li> <li> <p>Un modelo matem\u00e1tico se llama ca\u00f3tico si cambios muy peque\u00f1os en la entrada conducen a grandes cambios en los resultados, haci\u00e9ndolos parecer aleatorios o impredecibles. Los modelos de muchos fen\u00f3menos del mundo real exhiben un comportamiento ca\u00f3tico, lo que impone algunos l\u00edmites al poder de la computaci\u00f3n.</p> </li> </ul>"},{"location":"Capitulos/01_Computadoras_y_programas/#110-ejercicios","title":"1.10. Ejercicios","text":"Verdadero o falso <ol> <li>La inform\u00e1tica es el estudio de las computadoras.</li> <li>El CPU es el \"cerebro\" de la computadora.</li> <li>La memoria secundaria se llama RAM.</li> <li>Toda la informaci\u00f3n en la que est\u00e1 trabajando una computadora actualmente se almacena en la memoria principal.</li> <li>La sintaxis de un lenguaje es su significado y la sem\u00e1ntica es su forma.</li> <li>Una definici\u00f3n de funci\u00f3n es una secuencia de declaraciones que define un nuevo comando.</li> <li>Un entorno de programaci\u00f3n se refiere a una oficina donde trabajan los programadores.</li> <li>Una variable se utiliza para dar un nombre a un valor para que se pueda hacer referencia a \u00e9l en otros lugares.</li> <li>Se utiliza un bucle para saltar una secci\u00f3n de un programa.</li> <li>Una funci\u00f3n ca\u00f3tica no puede ser calculada por una computadora.</li> </ol> Un algoritmo es como <p>a) un peri\u00f3dico </p> <p>b) un manifiesto </p> <p>c) un tambor </p> <p>d) una receta</p> \u00bfCu\u00e1l es la cuesti\u00f3n fundamental de la inform\u00e1tica? <p>a) \u00bfA qu\u00e9 velocidad puede calcular una computadora?</p> <p>b) \u00bfQu\u00e9 informaci\u00f3n que se puede procesar autom\u00e1ticamente (computar)?</p> <p>c) \u00bfCu\u00e1l es el lenguaje de programaci\u00f3n m\u00e1s eficaz?</p> <p>d) \u00bfCu\u00e1nto dinero puede ganar un programador?</p> Un problema es intratable cuando <p>a) no se puede revertir su soluci\u00f3n</p> <p>b) involucra transistores</p> <p>c) tiene muchas soluciones</p> <p>d) no es pr\u00e1ctico resolver</p> \u00bfCu\u00e1l de los siguientes no es un ejemplo de memoria secundaria? <p>a) RAM </p> <p>b) disco duro </p> <p>c) unidad flash USB </p> <p>d) DVD</p> Los lenguajes inform\u00e1ticos dise\u00f1ados para ser utilizados y comprendidos por humanos son <p>a) lenguajes naturales</p> <p>b) lenguajes inform\u00e1ticos de alto nivel</p> <p>c) lenguajes de m\u00e1quina</p> <p>d) lenguajes de b\u00fasqueda y ejecuci\u00f3n</p> Una declaraci\u00f3n es <p>a) una traducci\u00f3n del lenguaje de m\u00e1quina</p> <p>b) un comando completo de computadora </p> <p>c) una descripci\u00f3n precisa de un problema </p> <p>d) una secci\u00f3n de un algoritmo</p> Una diferencia entre un compilador y un int\u00e9rprete es <p>a) un compilador es un programa</p> <p>b) un compilador se usa para traducir lenguaje de alto nivel a lenguaje de m\u00e1quina </p> <p>c) un compilador ya no se necesita despu\u00e9s de traducir un programa</p> <p>d) un compilador procesa el c\u00f3digo fuente</p> Por convenci\u00f3n, las declaraciones de un programa a menudo se colocan en una funci\u00f3n llamada <p>a) import </p> <p>b) main </p> <p>c) program </p> <p>d) IDLE</p> \u00bfCu\u00e1l de las siguientes afirmaciones no es cierta respecto de los comentarios? <p>a) Hacen que un programa sea m\u00e1s eficiente.</p> <p>b) Est\u00e1n destinados a lectores humanos.</p> <p>c) Python los ignora.</p> <p>d) En Python, comienzan con el signo de almohadilla (#).</p> Los elementos enumerados entre par\u00e9ntesis de la definici\u00f3n de una funci\u00f3n se denominan <p>a) par\u00e9ntesis</p> <p>b) par\u00e1metros</p> <p>c) argumentos</p> <p>d) tanto b como c son correctos</p> Sesi\u00f3n interactiva <p>Inicie una sesi\u00f3n interactiva de Python e intente escribir cada uno de los siguientes comandos. Anota los resultados que veas.</p> <pre><code>print(\"Hello, world!\")\n</code></pre> <pre><code>print(\"Hello\", \"world!\")\n</code></pre> <pre><code>print(3)\n</code></pre> <pre><code>print(3.0)\n</code></pre> <pre><code>print(2 + 3)\n</code></pre> <pre><code>print(2.0 + 3.0)\n</code></pre> <pre><code>print(\"2\" + \"3\")\n</code></pre> <pre><code>print(\"2+ 3=\", 2+ 3)\n</code></pre> <pre><code>print(2 * 3)\n</code></pre> <pre><code>print(2 ** 3)\n</code></pre> <pre><code>print(7 / 3)\n</code></pre> <pre><code>print(7 // 3)\n</code></pre> Ejecuci\u00f3n de programas de Python <p>Ingresa y ejecute el programa 01_caos.py de la Secci\u00f3n 1.6. Pru\u00e9belo con varios valores de entrada para ver que funciona como se describe en el cap\u00edtulo.</p> Edici\u00f3n de programas de Python <p>Modifica el programa 01_caos.py usando 2.0 en lugar de 3.9 como multiplicador en la funci\u00f3n log\u00edstica. Su l\u00ednea de c\u00f3digo modificada deber\u00eda verse as\u00ed:</p> <pre><code>x = 2.0 * x * (1 - x)\n</code></pre> Edici\u00f3n de programas de Python <p>Modifica el programa 01_caos.py para que imprima 20 valores en lugar de 10.</p> Edici\u00f3n de programas de Python <p>Modifica el programa 01_caos.py para que el usuario determine el n\u00famero de valores a imprimir.</p> Solo leeme en caso de que necesites ayuda con el ejercicio anterior <p>Tendr\u00e1s que agregar una l\u00ednea cerca de la parte superior del programa para obtener otro valor del usuario</p> <p><pre><code>n = eval(input(\"\u00bfCu\u00e1ntos n\u00fameros debo imprimir? \"))\n</code></pre> Luego necesitar\u00e1s cambiar el bucle para usar <code>n</code> en lugar de un n\u00famero espec\u00edfico.</p>"},{"location":"Capitulos/02_Escribiendo_Programas_Simples/","title":"Escribiendo programas simples","text":"<p>En desarrollo</p>"},{"location":"Capitulos/03_Computo_con_n%C3%BAmeros/","title":"Computo con n\u00fameros","text":"<p>En desarrollo</p>"},{"location":"Capitulos/04_Objetos_y_Gr%C3%A1ficos/","title":"Objetos y gr\u00e1ficos","text":"<p>En desarrollo</p>"},{"location":"Capitulos/05_Secuencias_cadenas_listas_y_archivos/","title":"Secuencias: Cadenas, Listas y Archivos","text":"<p>En desarrollo</p>"},{"location":"Capitulos/06_Definici%C3%B3n_de_funciones/","title":"Definici\u00f3n de funcioness","text":"<p>En desarrollo</p>"},{"location":"Capitulos/07_Estructuras_de_decisi%C3%B3n/","title":"Estructuras de decisi\u00f3n","text":"<p>En desarrollo</p>"},{"location":"Capitulos/08_Estructuras_de_bucle_y_booleanos/","title":"Estructuras de bucle y booleanos","text":"<p>En desarrollo</p>"},{"location":"Capitulos/09_Simulaci%C3%B3n_y_dise%C3%B1o/","title":"Simulaci\u00f3n y dise\u00f1o","text":"<p>En desarrollo</p>"},{"location":"Capitulos/10_Definici%C3%B3n_de_clases/","title":"Definici\u00f3n de clases","text":"<p>En desarrollo</p>"},{"location":"Capitulos/11_Colecciones_de_datos/","title":"Colecciones de datos","text":"<p>En desarrollo</p>"},{"location":"Capitulos/12_Dise%C3%B1o_orientado_a_objetos/","title":"Dise\u00f1o orientado a objetos","text":"<p>En desarrollo</p>"},{"location":"Capitulos/13_Dise%C3%B1o_de_algoritmos_y_recursi%C3%B3n/","title":"Dise\u00f1o de algoritmos y recursion","text":"<p>En desarrollo</p>"},{"location":"Gu%C3%ADas/01_Instalaci%C3%B3n_Python/","title":"Instalaci\u00f3n de Python","text":"<p>En desarrollo</p>"},{"location":"Gu%C3%ADas/02_Instalaci%C3%B3n_VSCode/","title":"Instalaci\u00f3n VSCode","text":"<p>En desarrollo</p>"}]}